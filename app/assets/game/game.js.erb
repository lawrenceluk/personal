/*
To do:
Art
Save
Responsive
*/
$("#newsflash").html("Initializing variables...")
var version = "0.33.1"

// declare variables
var oj = 0
var totaloj = 0
var o = 0
var totalo = 0

var ojcycletime = 15 //seconds
var ojcycle = ojcycletime
var ojpc = 3
var owned_ojpc_upgrades = 1
var ops = 0

var bonus_ops = 0
var bonus_ojpc = 0
var bonus_ojcycletime = 0
var bonuschance = 0.1 // 10% chance for bonus, upgradable later
var basebonustime = 60 // lasts at least 60 seconds (up to 120), upgradable later

var maxslots = 7 // upgradable later
var upgradesuccess = 0.5 // 50% chance of success, upgradable later
var failuredestroy = 0.5 // 50% chance that failure destroys it

var allItems // all orange makers
var omakers = [] // player's orange makers
var orangeMakerAmts = [] // how much of each they own
var ojpc_upgrades // all ojpc upgrades
var ojpc_upgradeAmts = [] // how much of each they own
var o_bonuses = []
var oj_bonuses = []

var clickreward = 1
var oclicks = 0
var ojclicks = 0
var started = new Date().getTime()
var time = new Date().getTime()
var newstime = 19 // seconds

var fps = 15
var clickchangeamt = 1
var msgcount = 0 // time in seconds till next newsflash

var clickbonus = 0.05 


// things that aren't saved
var maxcyclewidth = 102 // 102%
var activeomakers = 0
var o_messages
var loading
var savetime = 60 // save every 60 seconds
var lastsave = new Date().getTime()
var fromsave = -1
var loadingmessage = "Happy New Years!"

$("#whatversion").html("Version "+version)
$("#s_version").html(version)
$("#emptyshelf").html("You haven't purchased any orange producers yet.")

// overwrites saved data
function applyUpdates() {
	// update amounts to match provided base items
	if (orangeMakerAmts.length != allItems.length) {
		while (orangeMakerAmts.length < allItems.length) {
			orangeMakerAmts.push(0)
		}
	}
	if (ojpc_upgradeAmts.length != ojpc_upgrades.length) {
		while (ojpc_upgradeAmts.length < ojpc_upgrades.length) {
			ojpc_upgradeAmts.push(0)
		}
	}

	drawOShop()
	drawOJShop()
	updateAffordable()
}
// if load isn't called this won't be overwritten
$("#s_fromsave").html("New game!")
function loadGame(identifier, quiet) {
	if (quiet === undefined) {
		quiet = false
	}
	if (!identifier.match("[a-z]{8}")) {
		if (!quiet) {
			showNews("Invalid identifier.")
		}
	} else {
		var data = "identifier="+identifier
		var request = $.ajax({
	    url: "load", //sumbits it to the given url of the form
	    type: "GET",
	    data: data,
	    dataType: "HTML",
	    success : function (response) {
	    	if (response.length <= 2) {
	    		if (!quiet) {
	    			showNews("That identifier is not associated with any saves.")
	    		}
	    	} else {
					// parse the received dictionary
					if (response.charAt(0) === '{') {
						var game = JSON.parse(response)
						// the scalars
						oj = parseFloat(game.d_oj)
						totaloj = parseFloat(game.d_totaloj)
						o = parseFloat(game.d_o)
						totalo = parseFloat(game.d_totalo)
						ojcycletime = game.d_ojcycletime
						ojcycle = game.d_ojcycle
						ojpc = game.d_ojpc
						owned_ojpc_upgrades = game.d_owned_ojpc_upgrades
						ops = game.d_ops
						bonus_ops = 0
						bonus_ojpc = 0
						bonus_ojcycletime = 0
						bonuschance = game.d_bonuschance
						basebonustime = game.d_basebonustime
						maxslots = game.d_maxslots
						upgradesuccess = game.d_upgradesuccess
						failuredestroy = game.d_failuredestroy
						clickbonus = game.d_clickbonus
						oclicks = game.d_oclicks
						ojclicks = game.d_ojclicks
						started = game.d_started
						time = game.d_time
						fromsave = game.d_save
						if (fromsave != -1) {
							var date = new Date(fromsave);
							$("#s_fromsave").html(date.toString())
						}

						// data structures
						var tomakers = game.d_omakers
						omakers = []
						for (var i=0;i<tomakers.length;i++) {
							omakers.push({
								tier: tomakers[i].tier,
								name: allItems[tomakers[i].tier-1].name, 
								description: allItems[tomakers[i].tier-1].description, 
								ops: tomakers[i].ops,
								slots: tomakers[i].slots,
								alive: true
							})
						}

						orangeMakerAmts = game.d_orangeMakerAmts
						ojpc_upgradeAmts = game.d_ojpc_upgradeAmts


						// fresh bonuses (none active)
						for (var i=0;i<o_bonuses.length;i++) {
							if (o_bonuses[i].owned) {
								doBonus(o_bonuses[i], false)
								o_bonuses[i].owned = false
								o_bonuses[i].owneduntil = new Date().getTime()
							}
						}
						for (var i=0;i<oj_bonuses.length;i++) {
							if (oj_bonuses[i].owned) {
								doBonus(oj_bonuses[i], false)
								oj_bonuses[i].owned = false
								oj_bonuses[i].owneduntil = new Date().getTime()
							}
						}


						// load bonuses
						var dob = game.d_o_bonuses
						for (var i=0;i<dob.length;i++) {
							o_bonuses[dob[i].idx].owned = true
							o_bonuses[dob[i].idx].owneduntil = (new Date().getTime()) + dob[i].remaining
						}
						var dojb = game.d_oj_bonuses
						for (var i=0;i<dojb.length;i++) {
							oj_bonuses[dojb[i].idx].owned = true
							oj_bonuses[dojb[i].idx].owneduntil = (new Date().getTime()) + dojb[i].remaining
						}
					} else {
						oldLoad(response)
					}

					var adata = "identifier="+identifier
					var arequest = $.ajax({
				    url: "grab", //sumbits it to the given url of the form
				    type: "GET",
				    data: adata,
				    dataType: "HTML",
				    success : function (nresponse) {
				    	var split = nresponse.split("_")
				    	$("#s_rebirths").html(split[0])
				    	$("#s_credits").html(Beautify(parseInt(split[1])))
				    }
				  })

					$("#production_upgrades").html("")
					// redisplay bonuses
					var now = new Date().getTime()
					for (var i=0;i<o_bonuses.length;i++) {
						var bonus = o_bonuses[i]
						if (bonus.owned && bonus.owneduntil > now) {
							var bonusname = bonus.name.replace(/\s+/g, '')
							var str = "<div class='hoverable' id=contains"+bonusname+">"
							str += "<a class='nohover'><div class='production_upgrade_item'>"+bonus.name+"</div></a>"
							str += "<span class='small ninja'>"+bonus.description+"<div class='smaller'>Expires in "
							str += "<span id="+bonusname+"></span> seconds.</div></span></div>"
							if (!$("#nobonuses").hasClass("hiding")) {
								$("#nobonuses").remove()
							}
							doBonus(bonus, true)
							$("#production_upgrades").append(str)
						}
					}
					for (var i=0;i<oj_bonuses.length;i++) {
						var bonus = oj_bonuses[i]
						if (bonus.owned && bonus.owneduntil > now) {
							var bonusname = bonus.name.replace(/\s+/g, '')
							var str = "<div class='hoverable' id=contains"+bonusname+">"
							str += "<a class='nohover'><div class='production_upgrade_item'>"+bonus.name+"</div></a>"
							str += "<span class='small ninja'>"+bonus.description+"<div class='smaller'>Expires in "
							str += "<span id="+bonusname+"></span> seconds.</div></span></div>"
							if (!$("#nobonuses").hasClass("hiding")) {
								$("#nobonuses").remove()
							}
							doBonus(bonus, true)
							$("#production_upgrades").append(str)
						}
					}

					disp_o = o
					disp_ojcycle = ojcycletime
		    	$("#yourid").html(identifier)
		    	$('#oj_cycle_bar').width(Math.round((1-ojcycle/ojcycletime)*maxcyclewidth).toString()+"%")
		    	disp()
					// draw updated
					if (!$("#emptyshelf").hasClass("hiding")) {
						$("#emptyshelf").remove()
					}
					for (var i=0;i<omakers.length;i++) {
						if (omakers[i].alive == true) {
							activeomakers++
						}
					}
					drawShelf()
	    	}
	    	$("#omaker_detail").html("")
				$("#shelf_container").height("425px")
	    	applyUpdates()
		    showNews("Loaded most recent save. ("+millisecondsToStr(new Date().getTime() - fromsave)+" ago)")
			},
			failure: function(response) {
				if (!quiet) {
					showNews("Unable to load "+identifier+".")
				}
			}
		})
	}
	return false
}

function saveGame(quiet) {
	if (quiet === undefined) {
		quiet = false
	}
	var data = "identifier="+getCookie("identifier")

	// only saving the important parts of omakers
	var somakers = []
	for (var i=0;i<omakers.length;i++) {
		if (omakers[i].alive) {
			somakers.push({
				tier: omakers[i].tier,
				ops: omakers[i].ops,
				slots: omakers[i].slots
			})
		}
	}
	// only need to know time left for bonuses
	var write_o_bonuses = []
	for (var i=0;i<o_bonuses.length;i++) {
		if (o_bonuses[i].owned) {
			write_o_bonuses.push({
				idx: i,
				remaining: o_bonuses[i].owneduntil-(new Date().getTime())
			})
		}
	}
	var write_oj_bonuses = []
	for (var i=0;i<oj_bonuses.length;i++) {
		if (oj_bonuses[i].owned) {
			write_oj_bonuses.push({
				idx: i,
				remaining: oj_bonuses[i].owneduntil-(new Date().getTime())
			})
		}
	}

	var written = {
		d_oj: (oj).toString().replace(/\s/g, ''),
		d_totaloj: (totaloj).toString().replace(/\s/g, ''),
		d_o: (o).toString().replace(/\s/g, ''),
		d_totalo: (totalo).toString().replace(/\s/g, ''),
		d_ojcycletime: ojcycletime,
		d_ojcycle: ojcycle,
		d_ojpc: ojpc,
		d_owned_ojpc_upgrades: owned_ojpc_upgrades,
		d_ops: ops,
		d_bonus_ops: bonus_ops,
		d_bonus_ojpc: bonus_ojpc,
		d_bonus_ojcycletime: bonus_ojcycletime,
		d_bonuschance: bonuschance,
		d_basebonustime: basebonustime,
		d_maxslots: maxslots,
		d_upgradesuccess: upgradesuccess,
		d_failuredestroy: failuredestroy,
		d_omakers: somakers,
		d_orangeMakerAmts: orangeMakerAmts,
		d_ojpc_upgradeAmts: ojpc_upgradeAmts,
		d_o_bonuses: write_o_bonuses,
		d_oj_bonuses: write_oj_bonuses,
		d_clickbonus: clickbonus,
		d_oclicks: oclicks,
		d_ojclicks: ojclicks,
		d_started: started,
		d_time: time,
		d_save: new Date().getTime()
	}
	data += "&data="+JSON.stringify(written)

	$.ajax({
    type: "POST",
    url: "save", //submits it to the given url of the form
    data: data,
    dataType: "HTML",
    success: function(response) {
    	showNews(response+" ("+getCookie("identifier")+")")
    	if (response.length == 0) {
    		showNews("Error: write confirmation not received. Game could not be saved.")
    	}
    },
    failure: function(response) {
    	showNews("Error saving! Please try again.")
    }
	})
	return false
}
function resetGame() {
	oj = 0
	totaloj = 0
	o = 0
	totalo = 0

	ojcycletime = 15 //seconds
	ojcycle = ojcycletime
	ojpc = 3
	owned_ojpc_upgrades = 1
	ops = 0

	bonus_ops = 0
	bonus_ojpc = 0
	bonus_ojcycletime = 0
	bonuschance = 0.1 // 10% chance for bonus
	basebonustime = 60 // lasts at least 60 seconds (up to 120)
	clickbonus = 0.05

	maxslots = 7
	upgradesuccess = 0.5 // 50% chance of success
	failuredestroy = 0.5 // 50% chance that failure halves it

	for (var i=0;i<omakers.length;i++) {
		removeOMaker(omakers[i])
	}
	orangeMakerAmts = []
	cleanAllItems()
	omakers = []
	ojpc_upgradeAmts = []
	cleanOJPCUpgrades()

	clickreward = omakers.length + 1
	oclicks = 0
	ojclicks = 0
	started = new Date().getTime()
	time = new Date().getTime()
	newstime = 19 // seconds

	clickchangeamt = 1
	msgcount = 0

	cleanOBonuses()
	cleanOJBonuses()
	// reset all bonuses
	for (var i=0;i<o_bonuses.length;i++) {
		o_bonuses[i].owned = false
		o_bonuses[i].owneduntil = new Date().getTime()
	}
	for (var i=0;i<oj_bonuses.length;i++) {
		oj_bonuses[i].owned = false
		oj_bonuses[i].owneduntil = new Date().getTime()
	}
	$("#production_upgrades").html("")
	// redraw everything
	$('#oj_cycle_bar').width("0%")
	$("#omaker_shelf_purchases").html("")
	disp_o = 0
	disp_ojcycle = ojcycletime
	drawOShop()
	drawOJShop()
	updateAffordable()
	activeomakers = 0
	notified = false
}

function rebirth() {
	lastsave = new Date().getTime()
	var data = "identifier="+getCookie("identifier")+"&credits="+(Math.round(totalo/100000000000)+Math.round(totaloj/100000000000))
	var request = $.ajax({
    url: "rb",
    type: "POST",
    data: data,
    dataType: "HTML",
    success : function (response) {
			// don't want autosave to interrupt
			lastsave = new Date().getTime()
			// reset all bonuses
			for (var i=0;i<o_bonuses.length;i++) {
				o_bonuses[i].owned = false
				o_bonuses[i].owneduntil = new Date().getTime()
			}
			for (var i=0;i<oj_bonuses.length;i++) {
				oj_bonuses[i].owned = false
				oj_bonuses[i].owneduntil = new Date().getTime()
			}
			cleanOBonuses()
			cleanOJBonuses()

			// reset basic counters
			oj = 0
			totaloj = 0
			o = 0
			totalo = 0
			ojcycletime = 15
			ojcycle = 15
			ojpc = 3
			owned_ojpc_upgrades = 1
			ops = 0
			bonus_ops = 0
			bonus_ojpc = 0
			bonus_ojcycletime = 0
			clickreward = 1

			// remove all but perfect omakers
			var perfect = []
			for (var i=0;i<omakers.length;i++) {
				var item = omakers[i]
				var baseops = allItems[item.tier-1].ops
				var t = item.ops
				var upgrades = 0
				while (t > baseops) {
					upgrades++
					t /= 2
				}
				if (upgrades == maxslots) {
					perfect.push({
						tier: omakers[i].tier,
						ops: omakers[i].ops
					})
				}
			}
			// clean omakers completely
			omakers = []
			cleanAllItems()
			for (var i=0;i<perfect.length;i++) {
				omakers.push({
					tier: perfect[i].tier,
					name: allItems[perfect[i].tier-1].name, 
					description: allItems[perfect[i].tier-1].description, 
					ops: perfect[i].ops,
					slots: maxslots,
					alive: true
				})
				orangeMakerAmts[perfect[i].tier-1]++
				clickreward++
			}
			activeomakers = perfect.length

			// recalculate ops
			var newops = 0
			for (var i=0;i<omakers.length;i++) {
				if (omakers[i].alive) {
					newops += omakers[i].ops
				}
			}
			ops = newops

			// reset ojpc
			ojpc_upgradeAmts = []
			ojpc_upgrades = []
			cleanOJPCUpgrades()

			// fix anything that went negative
			for (var i=0;i<orangeMakerAmts.length;i++) {
				if (orangeMakerAmts[i] < 0) {
					orangeMakerAmts[i] = 0
				}
			}

			// the upgrades
			bonuschance += 0.02
			basebonustime += 10
			upgradesuccess += 0.01
			failuredestroy -= 0.01
			clickbonus += 0.02
			maxslots = 7

			if (upgradesuccess > 0.85) {
				upgradesuccess = 0.85
			}
			if (failuredestroy < 0.05) {
				failuredestroy = 0.05
			}

			$("#rebirth_rewards").html("")
			$("#do_rebirth").html("")
			$("#rebirthscreen").remove()
			$("#production_upgrades").html("")
			// redraw everything
			$('#oj_cycle_bar').width("0%")
			$("#omaker_shelf_purchases").html("")
			disp_o = 0
			disp_ojcycle = ojcycletime
			drawOShop()
			drawOJShop()
			drawShelf()
			updateAffordable()
			$("#stats").html("Stats")
			/* Change back to shelf */
			$("#omaker_shelf_purchases").removeClass("hidden")
			$("#stats_zone").addClass("hidden")
			$("#save_zone").addClass("hidden")
			$("#rebirth_zone").addClass("hidden")
			$("#omaker_detail").html("")
			$("#omaker_detail").addClass("hidden")
			$("#shelf_container").height("425px")
			notified = false
			saveGame(true)
			var counts = response.split("_")
			if (counts.length === 2) {
				showNews("Completed your "+counts[0]+" rebirth. You now have "+counts[1]+" Galactic Credits.")
			} else {
				showNews("Rebirth complete.")
			}
		}
	})
}

function oldLoad(response) {
	var chunks = response.split("***")
	for (var i=0;i<chunks.length;i++) {
		if (chunks[i].charAt(0) != '[') {
			chunks[i] = parseFloat(chunks[i])
		}
	}
	// load up the data
	oj = chunks[0]
	totaloj = chunks[1]
	o = chunks[2]
	totalo = chunks[3]

	ojcycletime = chunks[4] //seconds
	ojcycle = chunks[5]
	ojpc = chunks[6]
	owned_ojpc_upgrades = chunks[7]
	ops = chunks[8]

	bonus_ops = chunks[9]
	if (bonus_ops < 0) {
		bonus_ops = 0
	}
	bonus_ojpc = chunks[10]
	if (bonus_ojpc < 0) {
		bonus_ojpc = 0
	}
	bonus_ojcycletime = chunks[11]
	if (bonus_ojcycletime > 0) {
		bonus_ojcycletime = 0
	}
	bonuschance = chunks[12] // 10% chance for bonus
	if (bonuschance < 0.1) {
		bonuschance = 0.1
	}
	basebonustime = chunks[13] // lasts at least 60 seconds (up to 120)
	if (basebonustime < 60) {
		basebonustime = 60
	}

	maxslots = chunks[14]
	upgradesuccess = chunks[15] // 50% chance of success
	failuredestroy = chunks[16] // 50% chance that failure halves it

	// load omakers
	var tomakers = JSON.parse(chunks[17])
	omakers = []
	for (var i=0;i<tomakers.length;i++) {
		omakers.push({
			tier: tomakers[i].tier,
			name: allItems[tomakers[i].tier-1].name, 
			description: allItems[tomakers[i].tier-1].description, 
			ops: tomakers[i].ops,
			alive: tomakers[i].alive,
			slots: tomakers[i].slots
		})
	}
	orangeMakerAmts = JSON.parse(chunks[18])
	// the following code should fix saves that had broken omaker amts from rebirthing
	var flag = true
	for (var i=0;i<orangeMakerAmts.length;i++) {
		if (orangeMakerAmts[i] > 0) {
			flag = false
		}
	}
	if (flag) {
		for (var i=0;i<omakers.length;i++) {
			orangeMakerAmts[omakers[i].tier-1]++
		}
	}
	for (var i=0;i<orangeMakerAmts.length;i++) {
		if (orangeMakerAmts[i] < 0) {
			orangeMakerAmts[i] = 0
		}
	}

	// updating to 0.2
	if (chunks[19] != -1) {
		var old_ojpc_upgrades = JSON.parse(chunks[19])
		var pout = ""
		for (var i=0;i<old_ojpc_upgrades.length;i++) {
			pout+=" "+old_ojpc_upgrades[i].owned
			ojpc_upgradeAmts[i] = old_ojpc_upgrades[i].owned
		}
	}

	o_bonuses = JSON.parse(chunks[20])
	oj_bonuses = JSON.parse(chunks[21])

	clickreward = chunks[23]
	oclicks = chunks[24]
	ojclicks = chunks[25]
	started = chunks[26]
	time = chunks[27]
	newstime = chunks[28] // seconds

	fps = chunks[29]
	clickchangeamt = chunks[30]
	msgcount = chunks[31]

	// 0.2, adding ojpc_upgradeAmts
	if (chunks[32]) {
		ojpc_upgradeAmts = JSON.parse(chunks[32])
	}

	if (chunks[33]) {
		clickbonus = chunks[33]
	} else {
		clickbonus = 0.05
	}
}

/*

============================================================================
MESSAGES
============================================================================

*/

function OMessage(message, req) {
	this.message = message
	this.req = req
}
function loadOMessages() {
	o_messages = [
	new OMessage("Welcome to Juiced Up! v"+version, 0),
	new OMessage("The journey of a thousand oranges begins with a single squeeze!", 15),
	new OMessage("Did you know? Orange juice is usually made with oranges.", 50),
	new OMessage("Buy more orange producers to get more oranges per click.", 100),
	new OMessage("Clicking the orange gives you a chance at bonuses!", 1000),
	new OMessage("Not from concentrate!", 9999),
	new OMessage("Which was named first? Orange the fruit, or the color?", 12000),
	new OMessage("The more orange juice upgrades you buy, the more you will unlock! Collect them all!", 24000),
	new OMessage("Orange you glad you played this game?", 50000),
	new OMessage("I drink your orange juice! I drink it up!", 100000),
	new OMessage("Orange you tired of clicking? Upgrade your producers!", 150000),
	new OMessage("Orange you tired of orange puns?", 250000),
	new OMessage("Orange is live. Orange is love. Orange is planet.", 450000),
	new OMessage("Don't drink orange juice after brushing your teeth!", 650000),
	new OMessage("Fact: Oranges contain tons of Vitamin C! To unsubscribe from Orange Facts, collect 999,999,999,999 glasses of OJ.", 1000000),
	new OMessage("Fact: The bigger the navel in a navel orange, the sweeter it is! Am I lying? Who knows!", 2000000),
	new OMessage("Fact: Blood oranges eat their neighbors to grow bigger!", 5000000),
	new OMessage("Fact: The first flavor of sherbet was orange. How do you spell sherbet?", 10000000),
	new OMessage("Fact: Christopher Columbus brought oranges to the new world, so he must have been an cool guy.", 20000000),
	new OMessage("Clicking the Big Orange and Juice Faster buttons give you temporary bonuses. Don't miss out!", 30000000),
	new OMessage("Fact: The color of an orange has nothing to do with how ripe it is. How mysterious!", 40000000),
	new OMessage("Don't forget to upgrade your orange producers. You'll need them in the long haul.", 50000000),
	new OMessage("Fact: It takes fifty glasses of water to grow the oranges for one glass of OJ. OJ is perfect for fighting fires!", 90000000),
	new OMessage("Fact: The orange season lasts from October to June. Get em while they last!", 130000000),
	new OMessage("Fact: The orange juice industry employs 76,000 people in Florida. And you're doing more work than all of them!", 350000000),
	new OMessage("Fact: In global orange juice production, Brasil es numero uno! Hue hue hue brbrbr", 500000000),
	new OMessage("Fact: Oranges are naturally greenish brown and were bred to be orange. Everything you know is a lie!", 750000000),
	new OMessage("Your chance of passively receiving a bonus is doubled when you're looking at this page.", 800000000),
	new OMessage("You've almost produced one billion lifetime oranges!", 900000000),
	new OMessage("Congratulations! You've reached a billion oranges, but this is only the beginning.", 1000000000),
	new OMessage("<i>Juicing intensifies</i>", 1250000000),
	new OMessage("Refresh this page once in a while to receive the latest updates!", 1500000000),
	new OMessage("You are now unsubscribed from Orange Facts.", 999999999999),
	new OMessage("Your oranges have attracted the attention of extraterrestial beings. With 3 trillion OJ you will be eligible for rebirth.", 3000000000000)
]
}


/*

============================================================================
BONUSES
============================================================================

*/

function OBonus(name, description, chance, owneduntil, owned) {
	this.name = name
	this.description = description
	this.chance = chance
	this.owneduntil = new Date().getTime()
	owned = false
}
function cleanOBonuses() {
o_bonuses = [
	new OBonus("Fruit Frenzy", "Doubles orange production from all sources", 0.01),

	new OBonus("Flower Power", "Doubles orange production from orange patches", 0.05),
	new OBonus("Full Bloom", "Gives an additional 0.5 OpS for each orange patch", 0.25),
	new OBonus("Fields of Orange", "Gives an additional 1 OpS for each orange patch", 0.25),

	new OBonus("Shrub Sorcery", "Doubles orange production from orange shrubs", 0.05),
	new OBonus("Shrubbery", "Gives an additional 1 OpS for each orange shrub", 0.15),
	new OBonus("Bushier Shrubs", "Gives an additional 3 OpS for each orange shrub", 0.15),

	new OBonus("Tree Time", "Doubles orange production from orange trees", 0.02),
	new OBonus("Much Harvest", "Gives an additional 3 OpS for each orange tree", 0.15),
	new OBonus("Such Tree", "Gives an additional 5 OpS for each orange tree", 0.15),

	new OBonus("Monkey Business", "Doubles orange production from orangutans", 0.02),
	new OBonus("Aping Around", "Gives an additional 5 OpS for each orangutan", 0.05),
	new OBonus("Chimp Champ", "Gives an additional 12 OpS for each orangutan", 0.05),

	new OBonus("Gifted Grove", "Doubles orange production from orange groves", 0.01),
	new OBonus("Bumper Crop", "Gives an additional 20 OpS for each orange grove", 0.0325),
	new OBonus("Hundred Acre Wood", "Gives an additional 35 OpS for each orange grove", 0.0325),

	new OBonus("Genie On Call", "Doubles orange production from orange genies", 0.01),
	new OBonus("Orange Chicken", "Doubles orange production from orange genies", 0.025),
	new OBonus("More Wishes", "Triples orange production from orange genies", 0.025),

	new OBonus("Money Trees", "Increases bonus chance from clicking by 10 percent", 0.15),
	new OBonus("Good Juju", "Increases bonus chance from clicking by 10 percent", 0.1),
	new OBonus("Clockwork Orange", "Increases base bonus duration by one minute", 0.02)
]
}

function OJBonus(name, description, chance, owneduntil, owned) {
	this.name = name
	this.description = description
	this.chance = chance
	this.owneduntil = new Date().getTime()
	owned = false
}
function cleanOJBonuses() {
oj_bonuses = [

	new OJBonus("Squeezetaculous", "Reduces OJ cycle time by 0.5 seconds", 0.1),
	new OJBonus("Squeezalicious", "Reduces OJ cycle time by 0.5 seconds", 0.1),
	new OJBonus("Squeezetacular", "Reduces OJ cycle time by 0.5 seconds", 0.1),
	new OJBonus("Tight Squeeze", "Reduces OJ cycle time by 0.5 seconds", 0.1),
	new OJBonus("Critical Squeeze", "Reduces OJ cycle time by 1 second", 0.1),
	new OJBonus("Squeezus", "Reduces OJ cycle time by 2 seconds", 0.05),
	new OJBonus("Squeeze God", "Reduces OJ Cycle time by 3 seconds", 0.02),

	new OJBonus("Hump Day", "Reduces OJ cycle time by 0.5 seconds", 0.1),
	new OJBonus("Pulp Fiction", "Reduces OJ cycle time by 1.5 seconds", 0.08),
	new OJBonus("Pulp Nonfiction", "Reduces OJ cycle time by 2 seconds", 0.02),

	new OJBonus("Packing Pulp", "Gives an additional 5 glasses of OJ per cycle", 0.3),
	new OJBonus("Lesser Efficiency", "Gives an additional 20 glasses of OJ per cycle", 0.2),
	new OJBonus("Great Efficiency", "Gives an additional 40 glasses of OJ per cycle", 0.1),
	new OJBonus("Pulp Alchemy", "Gives an additional 100 glasses of OJ per cycle", 0.08),

	new OJBonus("Juicebox", "Grants additional 2 percent OJ per cycle", 0.15),
	new OJBonus("Juice Fever", "Grants additional 2 percent OJ per cycle", 0.15),
	new OJBonus("Juiceaholic", "Grants additional 2 percent OJ per cycle", 0.1),
	new OJBonus("Juiced Up", "Grants additional 2 percent OJ per cycle", 0.1),
	new OJBonus("Juice Jesus", "Grants additional 4 percent OJ per cycle", 0.05),
	new OJBonus("Juice God", "Grants additional 8 percent OJ per cycle", 0.02)
]
}

/*

============================================================================
UTIL
============================================================================

*/
var notified = false
function manageRebirth() {
	if (!notified && totalo > 3000000000000 && totaloj > 3000000000000) {
		showNews("Your orange juice has attracted the attention of extraterrestial beings.")
		if ($("#rebirth").html() === "") {
			var str = "<div class='rebirth_note' id='rebirthscreen'>Rebirth"
			str += "<img src='assets/ankh.png', width='60', class='gap unselectable'></div>"
			$("#rebirth").html(str)
		}
		notified = true
		var credits = Math.round(totalo/100000000000)+Math.round(totaloj/100000000000)
		var str = "<li>Bonus multiplier: +2% (→"+Beautify((bonuschance+0.02)*100)+"%)</li>"
		str += "<li>Base bonus time: +10 seconds (→"+(basebonustime+10)+"s)</li>"
		str += "<li>Upgrade success chance: +1% (→"+Beautify((upgradesuccess+0.01)*100)+"%)</li>"
		str += "<li>Losing OpS on failure chance: -1% (→"+Beautify((failuredestroy-0.01)*100)+"%)</li>"
		str += "<li>Bonus % of OpS on click: +2% (→"+Beautify((clickbonus+0.02)*100)+"%)</li>"
		str += "<li>Galactic Credits: "+Beautify(credits)+"</li>"

		$("#rebirth_rewards").html(str)
		$("#do_rebirth").html("<div id='completerebirth' class='o_option rebirth'>Rebirth</div>")
	}
}

function drawShelf() {
	var drawingomakers = {}
	// array for each tier
	for (var i=0;i<allItems.length;i++) {
		drawingomakers[i] = []
	}
	// fill the array at each tier
	for (var i=0;i<omakers.length;i++) {
		if (omakers[i].alive) {
			drawingomakers[omakers[i].tier-1].push(i+1)
		}
	}
	var str = "<br>"
	for (var _tier in drawingomakers) {
		var tier = (parseInt(_tier)+1)
		var theomakers = drawingomakers[_tier]
		if (theomakers.length > 0) {
			str += "<div class='small'>"+allItems[_tier].name+" : "+theomakers.length+"</div>"
			for (var i=0;i<theomakers.length;i++) {
				var item = omakers[theomakers[i]-1]
				var spec = ""
				if (item.ops > allItems[tier-1].ops) {
					// calculate # of successful upgrades
					var baseops = allItems[item.tier-1].ops
					var t = item.ops
					var upgrades = 0
					while (t > baseops) {
						upgrades++
						t /= 2
					}
					if (upgrades > 1) {
						spec = "is_"+upgrades
					}
				} else if (item.ops < allItems[tier-1].ops) {
					// calculate # of fails
					var baseops = allItems[item.tier-1].ops
					var t = item.ops
					var upgrades = 0
					while (t < baseops) {
						upgrades++
						t *= 2
					}
					if (upgrades > 1) {
						spec = "ns_"+upgrades
					}
				}
				str += "<img src='/assets/o"+tier+".png' id="+"oc_"+tier+"_"+(theomakers[i])+" class='omaker_item "+spec+"' height=60px>"
			}
			str += "<hr>"
		}
	}
	str = str.substring(0, str.length - 4)
	$("#omaker_shelf_purchases").html(str)
}

function removeOMaker(item) {
	var tier = item.tier
	if (tier != -1) {
		// remove existing bonuses
		doBonuses(false)
		// remove amt
		orangeMakerAmts[tier-1]--
		// remove the item from shelf
		$("#oc_"+(tier)+"_"+(omakers.indexOf(item)+1)).remove()
		// make it inactive
		item.alive = false
		activeomakers--
		// so it won't get bonuses
		item.name = ""
		// reduce orange per click
		clickreward--
		// redo bonus
		doBonuses(true)
		// Update oranges per second
		var newops = 0
		for (var i = 0; i < omakers.length; i++) {
			if (omakers[i].alive) {
				newops += omakers[i].ops
			}
		}
		ops = newops
		// update omaker counts
		updateAffordable()
		// back to main shelf view
		$("#omaker_detail").html("")
		$("#shelf_container").height("425px")
		drawShelf()
		return tier
	}
}

function getOJPCCost(item) {
	var tier = -1
	for (var i=0;i<ojpc_upgrades.length;i++) {
		if (item.name === ojpc_upgrades[i].name) {
			tier = i
			break
		}
	}
	if (tier > -1) {
		return Math.round(ojpc_upgrades[i].cost*Math.pow(1.15, ojpc_upgradeAmts[tier]))
	}
	return -1
}

function getOMakerCost(tier) {
	return Math.round(allItems[tier-1].cost*Math.pow(1.15, orangeMakerAmts[tier-1]))
}

function showNews(news) {
	$("#newsflash").html(news)
	msgcount = newstime
}

// From http://blog.samgb.com/incrementals-from-zero-to-hero-part-3/
function getCookie(cookie_name) {
    var c_value = document.cookie;
    var c_start = c_value.indexOf(" " + cookie_name + "=");
    if (c_start == -1) {
        c_start = c_value.indexOf(cookie_name + "=");
    }
    if (c_start == -1) return false;
    c_start = c_value.indexOf("=", c_start) + 1;
    var c_end = c_value.indexOf(";", c_start);
    if (c_end == -1) {
        c_end = c_value.length;
    }
    return c_value.substring(c_start, c_end).toString()
}

// From Cookie Clicker
function Beautify(what,floats)//turns 9999999 into 9,999,999
{
	var str='';
	if (!isFinite(what)) return 'Infinity';
	if (what.toString().indexOf('e')!=-1) return what.toString();
	what=Math.round(what*10000000)/10000000;//get rid of weird rounding errors
	if (floats>0)
	{
		var floater=what-Math.floor(what);
		floater=Math.round(floater*10000000)/10000000;//get rid of weird rounding errors
		var floatPresent=floater?1:0;
		floater=(floater.toString()+'0000000').slice(2,2+floats);//yes this is hacky (but it works)
		if (parseInt(floater)===0) floatPresent=0;
		str=Beautify(Math.floor(what))+(floatPresent?('.'+floater):'');
	}
	else
	{
		what=Math.floor(what);
		what=(what+'').split('').reverse();
		for (var i in what)
		{
			if (i%3==0 && i>0) str=','+str;
			str=what[i]+str;
		}
	}
	return str;
}

// http://stackoverflow.com/questions/8211744/convert-milliseconds-or-seconds-into-human-readable-form
function millisecondsToStr (milliseconds) {
    // TIP: to find current time in milliseconds, use:
    // var  current_time_milliseconds = new Date().getTime();

    // This function does not deal with leap years, however,
    // it should not be an issue because the output is aproximated.

    var temp = milliseconds / 1000;
    var years = Math.floor(temp / 31536000);
    var days = Math.floor((temp %= 31536000) / 86400);
    var str = ""
    if (days) {
        str += days + 'd, ';
    }
    var hours = Math.floor((temp %= 86400) / 3600);
    if (hours) {
        str += hours + 'h, ';
    }
    var minutes = Math.floor((temp %= 3600) / 60);
    if (minutes) {
        str += minutes + 'm, ';
    }
    var seconds = Math.floor(temp % 60);
    if (seconds) {
        str += seconds + 's';
    }
    return str
}

/*

============================================================================
THINGS THAT MAKE ORANGES
============================================================================

*/

$("#newsflash").html("Rotoscoping functionaters...")
function cleanAllItems() {
allItems = [
	{
	 tier: 1,
	 name: "Orange Patch", 
	 description: "A little patch of flowers. Oranges mysteriously appear here every so often.", 
	 ops: 0.3,
	 cost: 10,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 2,
	 name: "Orange Shrub", 
	 description: "A little bush that inexplicably produces oranges once in a while.", 
	 ops: 0.6,
	 cost: 33,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 3,
	 name: "Orange Tree", 
	 description: "Citrus sinensis. A tree that produces oranges at a healthy rate.", 
	 ops: 1.5,
	 cost: 333,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 4,
	 name: "Orangutan", 
	 description: "Leaves a trail of oranges in his wake. Food safety not guaranteed.", 
	 ops: 10,
	 cost: 1333,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 5,
	 name: "Orange Grove", 
	 description: "A troop of trees that produces a bountiful harvest.", 
	 ops: 25,
	 cost: 10000,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 6,
	 name: "Orange Genie", 
	 description: "<i>\"Orange doorhinge\"</i>", 
	 ops: 100,
	 cost: 65535,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 7,
	 name: "Orange Mystery", 
	 description: "A world of pure imagination...", 
	 ops: 1000,
	 cost: 676500,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 8,
	 name: "Pandora's Box", 
	 description: "The spirit of the orange barely contained within.", 
	 ops: 7777,
	 cost: 7777777,
	 alive: true,
	 slots: 0
	},
	{
	 tier: 9,
	 name: "One True Orange", 
	 description: "<i>All glory to the Orange</i>", 
	 ops: 50000,
	 cost: 78654321,
	 alive: true,
	 slots: 0
	},
	{
		tier: 10,
		name: "Sun God",
		description: "<i>Wither before its fruity wrath</i>",
		ops: 500000,
		cost: 4999999999,
		alive: true,
		slots: 0
	},
	{
		tier: 11,
		name: "Orange Hole",
		description: "Gathers oranges from infinite universes.",
		ops: 10000000,
		cost: 15678901234,
		alive: true,
		slots: 0
	},
	{
		tier: 12,
		name: "Endgame Fantasy",
		description: "A producer so powerful that it breaks the fourth wall.",
		ops: 99999999,
		cost: 1000000000000,
		alive: true,
		slots: 0
	}
]
	for (var i = 0; i < allItems.length; i++) {
		orangeMakerAmts[i] = 0
	} // start with 0 of all
}
/*

============================================================================
THINGS THAT MAKE ORANGE JUICE
============================================================================

*/

function ojpc_upgrade(name, description, req, ojpc, cost, owned) {
	this.name = name
	this.description = description
	this.req = req
	this.cost = cost
	this.ojpc = ojpc
	this.visible = false
	if (!owned) {
		this.owned = 0
	} else {
		this.owned = owned
	}
}

function cleanOJPCUpgrades() {
ojpc_upgrades = [
	new ojpc_upgrade("Little Bullet", "Limited capacity, serves 1", 0, 3, 10, 1),
	new ojpc_upgrade("Blender", "Perfect for small serving sizes", 0, 12, 70),
	new ojpc_upgrade("Blender XL", "Juice for the whole family", 0, 30, 175),
	new ojpc_upgrade("Blender ZZ", "Juice for the family and then some", 0, 70, 500),
	new ojpc_upgrade("Power Juicer", "For small juicing operations", 3, 150, 1000),
	new ojpc_upgrade("Power Juicer XL", "Getting serious about citrus", 10, 300, 2000),
	new ojpc_upgrade("Whirler v1", "Business grade juicing solution", 15, 900, 8000),
	new ojpc_upgrade("Whirler v2", "Upgraded with premium parts for premium pulp", 20, 1400, 13000),
	new ojpc_upgrade("Whirler v3", "Top of the line option for small business", 30, 2500, 20000),
	new ojpc_upgrade("OJ GIANT", "Stepping into the big leagues", 40, 10000, 100000),
	new ojpc_upgrade("OJ GIANT INDUSTRY GRADE", "The juice flows within you", 50, 55000, 800000),
	new ojpc_upgrade("Titanic Twister", "No one man should have all that power", 60, 100000, 1600000),
	new ojpc_upgrade("The Goliath", "Orange is live", 70, 500000, 9000000),
	new ojpc_upgrade("The Behemoth", "Orange is love", 80, 1250000, 25000000),
	new ojpc_upgrade("The Leviathan", "Orange is planet", 90, 10000000, 155555555),
	new ojpc_upgrade("Florida", "The Sunshine State", 100, 134000000, 12345678987),
	new ojpc_upgrade("Earth", "Humanity is oranges", 120, 600000000, 50000000000)
	]
	for (var i = 0; i < ojpc_upgrades.length; i++) {
		ojpc_upgradeAmts[i] = 0
	}
	ojpc_upgradeAmts[0] = 1
}

	/*
	time upgrades
	new ojpc_upgrade("Steel Blades", "Slicing and dicing", 3),
	new ojpc_upgrade("Parallel Peeling", "Multithreading for oranges", 5),
	new ojpc_upgrade("Ceramic Blades", "Sharp edges! Keep away from children!", 10),
	new ojpc_upgrade("Perfect Peeling", "NASA scientists have created self-peeling oranges", 14),
	*/

/*

============================================================================
SET THE STAGE
============================================================================

*/

$("#newsflash").html("Coloring in the lines...")
// laugh if you want but I'm tired and it works
function drawBackground() {
	$("body").css("background-color", "#FAEDE6")
	$("body").css("background-image", "-webkit-gradient(linear, 0 0, 0 100%, color-stop(.5, rgba(255, 255, 255, .4)), color-stop(.5, transparent), to(transparent))")
	$("body").css("background-image", "-moz-linear-gradient(rgba(255, 255, 255, .4) 50%, transparent 50%, transparent)")
	$("body").css("background-image", "-o-linear-gradient(rgba(255, 255, 255, .4) 50%, transparent 50%, transparent)")
	$("body").css("-webkit-background-size", "50px 50px")
	$("body").css("-moz-background-size", "50px 50px")
	$("body").css("background-size", "50px 50px")
}
/*	{	// background code shamelessly plundered from http://lea.verou.me/
	background-color: #FAEDE6;
	background-image: -webkit-gradient(linear, 0 0, 0 100%, color-stop(.5, rgba(255, 255, 255, .4)), color-stop(.5, transparent), to(transparent));
	background-image: -moz-linear-gradient(rgba(255, 255, 255, .4) 50%, transparent 50%, transparent);
	background-image: -o-linear-gradient(rgba(255, 255, 255, .4) 50%, transparent 50%, transparent);
	background-image: linear-gradient(rgba(255, 255, 255, .4) 50%, transparent 50%, transparent);
	-webkit-background-size: 50px 50px;
	-moz-background-size: 50px 50px;
	background-size: 50px 50px;}") */

function drawOShop() {
	var shop_contents = ""
	for (var i=0;i<allItems.length;i++) {
		var insert = "info_O_tier_"+(i+1)
		var name = "purchase_O_tier_"+(i+1)
		shop_contents += "<div class='shop_item' id="+name+">"
			shop_contents += "<div class='title'>"+allItems[i].name+"</div>"
			shop_contents += "<div class='description'>"+allItems[i].description+"</div>"
			shop_contents += "<span id="+insert+" class='info'>Costs "+Beautify(allItems[i].cost)+" glasses of OJ. Owned: "+orangeMakerAmts[i]+"</span>"
		shop_contents += "</div>"
	}
	$("#orange_income_shop").html(shop_contents)
}

function drawOJShop() {
	var shop_contents = ""
	var i = 0
	while (i < ojpc_upgrades.length && ojpc_upgrades[i].req <= owned_ojpc_upgrades) {
		ojpc_upgrades[i].visible = true
		var insert = "info_OJ_"+(i+1)
		var name = "purchase_OJ_"+(i+1)
		shop_contents += "<div class='shop_item upgrade' id="+name+">"
			shop_contents += "<div class='title'>"+ojpc_upgrades[i].name+"</div>"
			shop_contents += "<div class='description itz'>"+ojpc_upgrades[i].description+"</div>"
			shop_contents += "<div class='description'>Juices "+Beautify(ojpc_upgrades[i].ojpc)+" Oranges per cycle.</div>"
			shop_contents += "<div id="+insert+" class='info'>Costs "+Beautify(getOJPCCost(ojpc_upgrades[i]))+" glasses of OJ. Owned: "+ojpc_upgradeAmts[i]+"</div>"
		shop_contents += "</div>"
		i++
	}
	$("#ojpc_shop").html(shop_contents)
}


function updateOJMakerShop() {
	var shop_contents = ""
	for (var i=0;i<ojpc_upgrades.length;i++) {
		if (ojpc_upgrades[i].req <= owned_ojpc_upgrades && ojpc_upgrades[i].visible == false) {
			ojpc_upgrades[i].visible = true
			var insert = "info_OJ_"+(i+1)
			var name = "purchase_OJ_"+(i+1)
			shop_contents += "<div class='shop_item upgrade' id="+name+">"
				shop_contents += "<div class='title'>"+ojpc_upgrades[i].name+"</div>"
			shop_contents += "<div class='description itz'>"+ojpc_upgrades[i].description+"</div>"
			shop_contents += "<div class='description'>Juices "+Beautify(ojpc_upgrades[i].ojpc)+" Oranges per cycle.</div>"
				shop_contents += "<div id="+insert+" class='info'>Costs "+Beautify(getOJPCCost(ojpc_upgrades[i]))+" glasses of OJ. Owned: "+ojpc_upgradeAmts[i]+"</div>"
			shop_contents += "</div>"
		}
	}
	$("#ojpc_shop").append(shop_contents)
}
/*

============================================================================
GRAPHICS
============================================================================

*/

function drawOrangeClicked(amt, x, y) {
	var name = Math.round(Math.random()*1000000).toString()
	$("#big_orange_area").append("<span class='clicked_orange' id="+name+">+"+Beautify(amt)+"</span>")
	$("#"+name).css({
	  position:'absolute',
	  top: (y+55+(Math.random()*20)),
	  left: x-25,
	  zIndex: 100
	})
	animateOClick($("#"+name), x, 30)
}

function animateOClick(div, x, countdown) {
	div.css({
		left: x,
		opacity:countdown/10
	})
	if (countdown > 0) {
		setTimeout(function() {animateOClick(div, x+8, countdown-1)}, 30)
	} else {
		div.remove()
	}
}

function drawClicked(str, x, y) {
	var name = "j"+Math.round(Math.random()*1000000).toString()
	$("#makejuice_area").append("<span class='clicked_orange' id="+name+">"+str+"</span>")
	$("#"+name).css({
	  position:'absolute',
	  top: (y+75),
	  left: x-25+(Math.random()*25),
	  zIndex: 100
	})
	animateClick($("#"+name), y, 14)
}

function animateClick(div, y, countdown) {
	div.css({
		top: y,
		opacity:countdown/10
	})
	if (countdown > 0) {
		setTimeout(function() {animateClick(div, y-2, countdown-1)}, 30)
	} else {
		div.remove()
	}
}

/*

============================================================================
BONUSES
============================================================================

*/

function getOBonus() {
	var bonus = o_bonuses[Math.floor(Math.random()*o_bonuses.length)]
	if (Math.random() > bonus.chance*bonuschance) {
		// don't get the bonus
	} else if (bonus.owneduntil < new Date().getTime()) {
		var seconds = Math.round(basebonustime+Math.random()*basebonustime)
		bonus.owneduntil = (new Date().getTime())+seconds*1000
		bonus.owned = true
		var bonusname = bonus.name.replace(/\s+/g, '')

		var str = "<div class='hoverable' id=contains"+bonusname+">"
		str += "<a class='nohover'><div class='production_upgrade_item'>"+bonus.name+"</div></a>"
		str += "<span class='small ninja'>"+bonus.description+"<div class='smaller'>Expires in "
		str += "<span id="+bonusname+"></span> seconds.</div></span></div>"
		if (!$("#nobonuses").hasClass("hiding")) {
			$("#nobonuses").remove()
		}
		doBonus(bonus, true)
		showNews("You received a bonus: '"+bonus.name+"'! "+bonus.description+".")
		$("#production_upgrades").append(str)
	}
}

function getOJBonus() {
	var bonus = oj_bonuses[Math.floor(Math.random()*oj_bonuses.length)]
	if (Math.random() > bonus.chance*bonuschance) {
		// don't get the bonus
	} else if (bonus.owneduntil < new Date().getTime()) {
		var seconds = Math.round(basebonustime+Math.random()*basebonustime)
		bonus.owned = true
		bonus.owneduntil = (new Date().getTime())+seconds*1000
		var bonusname = bonus.name.replace(/\s+/g, '')

		var str = "<div class='hoverable' id=contains"+bonusname+">"
		str += "<a class='nohover'><div class='production_upgrade_item'>"+bonus.name+"</div></a>"
		str += "<span class='small ninja'>"+bonus.description+"<div class='smaller'>Expires in "
		str += "<span id="+bonusname+"></span> seconds.</div></span></div>"
		if (!$("#nobonuses").hasClass("hiding")) {
			$("#nobonuses").remove()
		}
		doBonus(bonus, true)
		showNews("You received a bonus: '"+bonus.name+"'! "+bonus.description+".")
		$("#production_upgrades").append(str)
	}
}

// TODO FIX BONUSES SOMETHING IS WRONG WHY???
/*
	Given the name of bonus, apply (true) or remove (false)
*/
function doBonus(bonus, apply) {
	if (bonus.name === "Fruit Frenzy") {
		for (var i=0;i<omakers.length;i++) {
			if (apply) {
				bonus_ops += omakers[i].ops
			} else {
				bonus_ops -= omakers[i].ops
			}
		}
	} else if (bonus.name === "Flower Power") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Patch") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Full Bloom") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Patch") {
				if (apply) {
					bonus_ops += 0.5
				} else {
					bonus_ops -= 0.5
				}
			}
		}
	} else if (bonus.name === "Fields of Orange") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Patch") {
				if (apply) {
					bonus_ops += 1
				} else {
					bonus_ops -= 1
				}
			}
		}
	} else if (bonus.name === "Shrub Sorcery") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Shrub") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Shrubbery") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Shrub") {
				if (apply) {
					bonus_ops += 1
				} else {
					bonus_ops -= 1
				}
			}
		}
	} else if (bonus.name === "Bushier Shrubs") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Shrub") {
				if (apply) {
					bonus_ops += 3
				} else {
					bonus_ops -= 3
				}
			}
		}
	} else if (bonus.name === "Tree Time") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Tree") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Much Harvest") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Tree") {
				if (apply) {
					bonus_ops += 3
				} else {
					bonus_ops -= 3
				}
			}
		}
	} else if (bonus.name === "Such Tree") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Tree") {
				if (apply) {
					bonus_ops += 5
				} else {
					bonus_ops -= 5
				}
			}
		}
	} else if (bonus.name === "Monkey Business") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orangutan") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Aping Around") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orangutan") {
				if (apply) {
					bonus_ops += 5
				} else {
					bonus_ops -= 5
				}
			}
		}
	} else if (bonus.name === "Chimp Champ") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orangutan") {
				if (apply) {
					bonus_ops += 12
				} else {
					bonus_ops -= 12
				}
			}
		}
	} else if (bonus.name === "Gifted Grove") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Grove") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Bumper Crop") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Grove") {
				if (apply) {
					bonus_ops += 20
				} else {
					bonus_ops -= 20
				}
			}
		}
	} else if (bonus.name === "Hundred Acre Wood") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Grove") {
				if (apply) {
					bonus_ops += 35
				} else {
					bonus_ops -= 35
				}
			}
		}
	} else if (bonus.name === "Genie On Call") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Genie") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Orange Chicken") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Genie") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "More Wishes") {
		for (var i=0;i<omakers.length;i++) {
			if (omakers[i].name === "Orange Genie") {
				if (apply) {
					bonus_ops += omakers[i].ops
				} else {
					bonus_ops -= omakers[i].ops
				}
			}
		}
	} else if (bonus.name === "Money Trees") {
		if (apply) {
			bonuschance += 0.1
		} else {
			bonuschance -= 0.1
		}
	} else if (bonus.name === "Good Juju") {
		if (apply) {
			bonuschance += 0.1
		} else {
			bonuschance -= 0.1
		}
	} else if (bonus.name === "Clockwork Orange") {
		if (apply) {
			basebonustime += 60
		} else {
			basebonustime -= 60
		}
	} else if (bonus.name === "Squeezetaculous" || bonus.name === "Squeezalicious" 
		|| bonus.name === "Squeezetacular" || bonus.name === "Tight Squeeze") {
		if (apply) {
			bonus_ojcycletime -= 0.5
		} else {
			bonus_ojcycletime += 0.5
		}
	} else if (bonus.name === "Critical Squeeze") {
		if (apply) {
			bonus_ojcycletime -= 1
		} else {
			bonus_ojcycletime += 1
		}
	} else if (bonus.name === "Squeezus") {
		if (apply) {
			bonus_ojcycletime -= 2
		} else {
			bonus_ojcycletime += 2
		}
	} else if (bonus.name === "Squeeze God") {
		if (apply) {
			bonus_ojcycletime -= 3
		} else {
			bonus_ojcycletime += 3
		}
	} else if (bonus.name === "Hump Day") {
		if (apply) {
			bonus_ojcycletime -= 0.5
		} else {
			bonus_ojcycletime += 0.5
		}
	} else if (bonus.name === "Pulp Fiction") {
		if (apply) {
			bonus_ojcycletime -= 1.5
		} else {
			bonus_ojcycletime += 1.5
		}		
	} else if (bonus.name === "Pulp Nonfiction") {
		if (apply) {
			bonus_ojcycletime -= 2
		} else {
			bonus_ojcycletime += 2
		}		
	} else if (bonus.name === "Packing Pulp") {
		if (apply) {
			bonus_ojpc += 5
		} else {
			bonus_ojpc -= 5
		}		
	} else if (bonus.name === "Lesser Efficiency") {
		if (apply) {
			bonus_ojpc += 20
		} else {
			bonus_ojpc -= 20
		}		
	} else if (bonus.name === "Great Efficiency") {
		if (apply) {
			bonus_ojpc += 40
		} else {
			bonus_ojpc -= 40
		}
	} else if (bonus.name === "Pulp Alchemy") {
		if (apply) {
			bonus_ojpc += 100
		} else {
			bonus_ojpc -= 100
		}
	} else if (bonus.name === "Juicebox" || bonus.name === "Juice Fever" || bonus.name === "Juiceaholic"
		 || bonus.name === "Juiced Up") {
		if (apply) {
			bonus_ojpc += Math.floor(ojpc*0.02)
		} else {
			bonus_ojpc -= Math.floor(ojpc*0.02)
		}
	} else if (bonus.name === "Juice Jesus") {
		if (apply) {
			bonus_ojpc += Math.floor(ojpc*0.04)
		} else {
			bonus_ojpc -= Math.floor(ojpc*0.04)
		}
	} else if (bonus.name === "Juice God") {
		if (apply) {
			bonus_ojpc += Math.floor(ojpc*0.08)
		} else {
			bonus_ojpc -= Math.floor(ojpc*0.08)
		}
	}
	if (bonus_ojpc < 0) {
		bonus_ojpc = 0
	}
	if (bonus_ops < 0) {
		bonus_ops = 0
	}
	if (bonus_ojcycletime > 0) {
		bonus_ojcycletime = 0
	} 
}

function clearBonuses() {
	for (var i=0; i < oj_bonuses.length; i++) {
		if (oj_bonuses[i].name === name && oj_bonuses[i].owned)
			return
	}
	for (var i=0; i < o_bonuses.length; i++) {
		if (o_bonuses[i].name === name && o_bonuses[i].owned)
			return
	}
	bonus_ojpc = 0
	bonus_ops = 0
	bonus_ojcycletime = 0
}

function doBonuses(apply) {
	for (var i=0; i < oj_bonuses.length; i++) {
		if (oj_bonuses[i].owned) {
			doBonus(oj_bonuses[i], apply)
		} 
	}
	for (var i=0; i < o_bonuses.length; i++) {
		if (o_bonuses[i].owned) {
			doBonus(o_bonuses[i], apply)
		}
	}
}

function bonusCleanup() {
	// remove old bonuses
	var noactive = true
	for (var i = 0; i < oj_bonuses.length; i++) {
		var now = new Date().getTime()
		var bonus = oj_bonuses[i]
		var bonusname = bonus.name.replace(/\s+/g, '')
		if (bonus.owned) {
			if (bonus.owneduntil < now) {
				doBonus(bonus, false)
				bonus.owned = false
				$("#contains"+bonusname).remove()
				showNews(bonus.name+" has expired.")
			} else {
				var seconds = Math.floor((bonus.owneduntil - now)/1000)
				$("#"+bonusname).html(seconds)
				noactive = false
			}
		}
	}
	for (var i = 0; i < o_bonuses.length; i++) {
		var now = new Date().getTime()
		var bonus = o_bonuses[i]
		var bonusname = bonus.name.replace(/\s+/g, '')
		if (bonus.owned) {
			if (bonus.owneduntil < now) {
				doBonus(bonus, false)
				bonus.owned = false
				$("#contains"+bonusname).remove()
				showNews(bonus.name+" has expired.")
			} else {
				var seconds = Math.floor((bonus.owneduntil - now)/1000)
				$("#"+bonusname).html(seconds)
				noactive = false
			}
		}
	}
	if (noactive) {
		bonus_ojpc = 0
		bonus_ops = 0
		bonus_ojcycletime = 0
	}
}

/*

============================================================================
BUTTONS
============================================================================

*/

$("#newsflash").html("Loosening buttons...")

var lastclicked_o = new Date().getTime()
// CLICKED THE BIG ORANGE
$("#geto_button").mousedown(function(e) {
	if ((new Date().getTime()) > lastclicked_o+100) {
		getOBonus()
		oclicks++
		var o_given = clickreward + Math.round((ops+bonus_ops)*clickbonus)
		o += o_given
		totalo += o_given
		disp_o += o_given
		lastclicked_o = new Date().getTime()

		// graphics
	  var offset = $(this).offset()
   	drawOrangeClicked(o_given, e.clientX - offset.left, e.clientY - offset.top)
   	$("#o_count").html(Beautify(disp_o))
  }
})

var lastclicked_oj = new Date().getTime()
// CLICKED JUICE FASTER
$("#makeoj_button").mousedown(function (e) {
	if ((new Date().getTime()) > lastclicked_oj+220) {
		getOJBonus()
		ojclicks++
		if (o > 0) {
			ojcycle -= clickchangeamt
			disp_ojcycle -= clickchangeamt
			calculateJuiceSqueezed()
			// graphics
			var offset = $(this).offset()
	   	drawClicked("-1 s", e.clientX - offset.left, e.clientY - offset.top)
		}
		lastclicked_oj = new Date().getTime()
	}
})

function purchaseOMaker(tier) {
	var cost = getOMakerCost(tier)
	//if they have enough oj
	if (oj >= cost) {
		// empty the shelf
		if (!$("#emptyshelf").hasClass("hiding")) {
			$("#emptyshelf").remove()
		}
		// pay up
		oj -= cost
		// remove existing bonuses
		doBonuses(false)
		// give the item
		omakers.push({
			tier: tier,
			name: allItems[tier-1].name,
			description: allItems[tier-1].description,
			ops: allItems[tier-1].ops,
			cost: allItems[tier-1].cost,
			alive: true,
			slots: 0
		})

		// update amount owned
		orangeMakerAmts[tier-1]++
		activeomakers++
		// draw the new item
		drawShelf()

		var newops = 0
		// Update oranges per second
		for (var i = 0; i < omakers.length; i++) {
			if (omakers[i].alive) {
				newops += omakers[i].ops
			}
		}
		ops = newops
		// Update click reward
		clickreward++
		// update all values
		updateAffordable()
		// give back bonuses
		doBonuses(true)
		// draw the display pane
		if (active) {
			active.removeClass("active")
		}
		active = $("#oc_"+tier+"_"+omakers.length)
		active.addClass("active")
		// display
		var index = omakers.length - 1
		var item = omakers[omakers.length - 1]
		var str = item.name+"<div class='pull-right'><div class='o_option' id="+"upgrade_o_"+index
		str += " title='Doubles OpS with "+Beautify(upgradesuccess*100)+"% success rate. If upgrade fails, this producer has a "
		str += Beautify(failuredestroy*100)+"% chance of having its OpS halved.'>Upgrade</div>"
		str += "<div class='sell o_option' id="+"sell_o_"+index+" title='Sells for "
		str += Math.round(getOMakerCost(item.tier)/2)+" OJ.'>Sell</div></div>"
		var show_ops = item.ops
		if (item.ops >= 1000) {
			show_ops = Beautify(item.ops)
		}
		str += " <div class='small'>OpS: <span id='ops_update'>"+show_ops+"</span>"
		str += "<br>Upgrades: <span id='slots'>"+item.slots+"</span>/"+maxslots+"<span id='upgraded'></span></div>"
		$("#omaker_detail").html("<div class='shorter shelf'>"+str+"</div>")
		if ($("#stats").html() == "Stats") {
			$("#shelf_container").height("325px")
		}


		if (ops < 1000) {
			$("#ops_count").html(Math.round(ops * 10) / 10)
		} else {
			$("#ops_count").html(Beautify(ops))
		}
		$("#oj_count").html(Beautify(oj))
	}
}

// CLICK AN ITEM TO SEE ITS DETAILS
var active
$("#omaker_shelf_purchases").on('click', function(event) {
	var index = parseInt(event.target.id.split("_").slice(-1)[0])-1
	var item = omakers[index]
	if (item) {
		if (active) {
			active.removeClass("active")
		}
		active = $("#"+event.target.id)
		active.addClass("active")
		var disabled = ""
		if (item.slots >= maxslots) {
			disabled = "inactive"
		}
		// calculate # of successful upgrades
		var baseops = allItems[item.tier-1].ops
		var t = item.ops
		var upgrades = 0
		if (t > baseops) {
			while (t > baseops) {
				upgrades++
				t /= 2
			}
		} else if (t < baseops) {
			while (t < baseops) {
				upgrades--
				t *= 2
			}
		}
		var upgraded = ""
		var status = "upgraded"
		if (upgrades > 0) {
			upgraded = " (+"+upgrades+")"
		} else if (upgrades < 0) {
			upgraded = " ("+upgrades+")"
			status = "failed"
		}
		// display
		var str = item.name+"<div class='pull-right'><div class='o_option "+disabled+"' id="+"upgrade_o_"+index
		str += " title='Doubles OpS with "+Beautify(upgradesuccess*100)+"% success rate. If upgrade fails, this producer has a "
		str += Beautify(failuredestroy*100)+"% chance of having its OpS halved.'>Upgrade</div>"
		str += "<div class='sell o_option' id="+"sell_o_"+index+" title='Sells for "
		str += Math.round(getOMakerCost(item.tier)/2)+" OJ.'>Sell</div></div>"
		var show_ops = item.ops
		if (item.ops >= 1000) {
			show_ops = Beautify(item.ops)
		}
		str += " <div class='small'>OpS: <span id='ops_update'>"+show_ops+"</span>"
		str += "<br>Upgrades: <span id='slots'>"+item.slots+"</span>/"+maxslots+"<span id='upgraded' class="+status+">"+upgraded+"</span></div>"
		$("#omaker_detail").html("<div class='shorter shelf'>"+str+"</div>")
		$("#shelf_container").height("325px")
	} else {
		if (active) {
			active.removeClass("active")
		}		
		$("#omaker_detail").html("")
		$("#shelf_container").height("425px")
	}
})

$("#omaker_detail").on('click', function(event) {
	var index = parseInt(event.target.id.split("_").slice(-1)[0])
	if (!isNaN(index)) {
		var item = omakers[index]
		if (event.target.id.split("_")[0] === "sell") {
			//if (confirm("Are you sure you want to sell this "+item.name+"? You'll miss out on "+item.ops+" oranges per second.")) {
				var prevprice = getOMakerCost(item.tier)
				showNews("Sold "+item.name+" ("+item.ops+" OpS) for "+Math.round(prevprice/2)+" OJ.")
				oj += Math.round(prevprice/2)
				$("#oj_count").html(oj)
				removeOMaker(item)
				updateAffordable()
			// }
		} else {
			// if slots are left
			if (item.slots < maxslots) {
				// if success
				if (Math.random() <= upgradesuccess) {
					doBonuses(false)
					item.ops += item.ops
					$("#ops_update").html(item.ops)
					// Recalculate oranges per second
					var newops = 0
					for (var i = 0; i < omakers.length; i++) {
						if (omakers[i].alive) {
							newops += omakers[i].ops
						}
					}
					ops = newops
					doBonuses(true)
					item.slots++
					$("#slots").html(item.slots)
					// calculate # of successful upgrades
					var baseops = allItems[item.tier-1].ops
					var t = item.ops
					var upgrades = 0
					if (t > baseops) {
						while (t > baseops) {
							upgrades++
							t /= 2
						}
					} else if (t < baseops) {
						while (t < baseops) {
							upgrades--
							t *= 2
						}
					}
					var upgraded = ""
					var status = "upgraded"
					var u = $("#upgraded")
					if (upgrades > 0) {
						// update icon
						var onshelf = $("#oc_"+item.tier+"_"+(index+1))
						onshelf.removeClass("is_2 is_4 is_6 is_7 ns_2 ns_4 ns_6")
						if (upgrades > 1) {
							onshelf.addClass("is_"+upgrades)
						} else if (upgrades < 1) {
							onshelf.addClass("ns_"+Math.abs(upgrades))
						}
						// update upgrades text
						upgraded = " (+"+upgrades+")"
						if (u.hasClass("failed")) {
							u.removeClass("failed")
						}
						u.html(" (+"+upgrades+")")
					} else if (upgrades < 0) {
						var onshelf = $("#oc_"+item.tier+"_"+(index+1))
						onshelf.removeClass("is_2 is_4 is_6 is_7 ns_2 ns_4 ns_6")
						if (upgrades > 1) {
							onshelf.addClass("is_"+upgrades)
						} else if (upgrades < 1) {
							onshelf.addClass("ns_"+Math.abs(upgrades))
						}

						upgraded = " ("+upgrades+")"
						if (!u.hasClass("failed")) {
							u.addClass("failed")
						}
						u.html(" ("+upgrades+")")
					} else {
						u.html("")
					}
					if (item.slots == maxslots) {
						$("#"+event.target.id).addClass("inactive")
					}
					//$("#oc_"+item.tier+"_"+(index+1)).addClass("scrolled")
					showNews("Upgraded "+item.name+" to "+item.ops+" OpS! Used "+item.slots+" out of "+maxslots+" possible upgrades.")
				} else {
					// if fails and halves
					if (Math.random() < failuredestroy) {
						item.slots++
						doBonuses(false)
						item.ops /= 2
						$("#ops_update").html(item.ops)
						// calculate # of successful upgrades
						var baseops = allItems[item.tier-1].ops
						var t = item.ops
						var upgrades = 0
						if (t > baseops) {
							while (t > baseops) {
								upgrades++
								t /= 2
							}
						} else if (t < baseops) {
							while (t < baseops) {
								upgrades--
								t *= 2
							}
						}
						var upgraded = ""
						var status = "upgraded"
						var u = $("#upgraded")
							if (upgrades > 0) {
							var onshelf = $("#oc_"+item.tier+"_"+(index+1))
							onshelf.removeClass("is_2 is_4 is_6 is_7 ns_2 ns_4 ns_6")
							if (upgrades > 1) {
								onshelf.addClass("is_"+upgrades)
							} else if (upgrades < 1) {
								onshelf.addClass("ns_"+Math.abs(upgrades))
							}

							upgraded = " (+"+upgrades+")"
							if (u.hasClass("failed")) {
								u.removeClass("failed")
							}
							u.html(" (+"+upgrades+")")
						} else if (upgrades < 0) {
							// update icon
							var onshelf = $("#oc_"+item.tier+"_"+(index+1))
							onshelf.removeClass("is_2 is_4 is_6 is_7 ns_2 ns_4 ns_6")
							if (upgrades > 1) {
								onshelf.addClass("is_"+upgrades)
							} else if (upgrades < 1) {
								onshelf.addClass("ns_"+Math.abs(upgrades))
							}
							// update text
							upgraded = " ("+upgrades+")"
							if (!u.hasClass("failed")) {
								u.addClass("failed")
							}
							u.html(" ("+upgrades+")")
						} else {
							u.html("")
						}
						// Recalculate oranges per second
						var newops = 0
						for (var i = 0; i < omakers.length; i++) {
							if (omakers[i].alive) {
								newops += omakers[i].ops
							}
						}
						ops = newops
						doBonuses(true)
						if (item.slots == maxslots) {
							$("#"+event.target.id).addClass("inactive")
						}
						// update slots
						$("#slots").html(item.slots)
						var str = "Oh no! The upgrade failed and halved the "+item.name+"'s OpS."
						str += " Used "+item.slots+" out of "+maxslots+" possible upgrades."
						showNews(str)
					} else {
						item.slots++
						$("#slots").html(item.slots)
						var str = "An upgrade was attempted but the "+item.name
						str += " ("+item.ops+" OpS) didn't change. "+(maxslots-item.slots)+" tries remaining."
						if (item.slots == maxslots) {
							$("#"+event.target.id).addClass("inactive")
						}
						showNews(str)
					}
				}
			}
		}
	}
})

var savelastclicked = new Date().getTime()
$("#savebutton").click(function() {
	// if it's been 5 seconds since last save
	if (new Date().getTime() > savelastclicked + 5000) {
		saveGame()
		savelastclicked = new Date().getTime()
		lastsave = new Date().getTime()
	}
})

$("#loadbutton").click(function() {
	loadGame($("#getloadid").val())
})

$("#resetbutton").click(function() {
	if (confirm("Are you sure? You will lose all the progress you have made in this game, including rebirth bonuses.")) {
		resetGame()
	}
})

$("#do_rebirth").on('click', function(event) {
	if ($(event.target).attr('id') === "completerebirth") {
		if (confirm("You're about to complete a rebirth. Are you sure?")) {
			rebirth()
		}
	}
})

$("#orange_income_shop").on('click', function(event) {
	if ($(event.target).attr('class') === "shop_item") {
		var clicked = event.target.id.split("_")
		purchaseOMaker(parseInt(clicked[clicked.length-1]))
	} else {
		var clicked = $(event.target).parent().attr('id').split("_")
		purchaseOMaker(parseInt(clicked[clicked.length-1]))
	}
})

// BOUGHT AN OJPC UPGRADE purchaseOJ
$("#ojpc_shop").on('click', function(event) {
	var tier
	if ($(event.target).attr('class').indexOf("shop_item") != -1) {
		var temp = event.target.id.split("_")
		tier = parseInt(temp[temp.length-1])
	} else {
		var temp = $(event.target).parent().attr('id').split("_")
		tier = parseInt(temp[temp.length-1])
	}
	var cost = getOJPCCost(ojpc_upgrades[tier-1])
	//if they have enough oj
	if (oj >= cost) {
		//pay up
		oj -= cost
		// remove bonuses
		doBonuses(false)
		//increase ojpc
		ojpc += ojpc_upgrades[tier-1].ojpc
		// update amount owned
		owned_ojpc_upgrades++
		ojpc_upgradeAmts[tier-1]++
		// update shop based on unlocks
		updateOJMakerShop()
		// update what's affordable
		updateAffordable()
		// apply bonuses again
		doBonuses(true)
		// update values on screen
		$("#oj_count, #s_oj").html(Beautify(oj))
		$("#ojpc_count").html(Beautify(ojpc+bonus_ojpc))
		$("#info_OJ_"+(tier)).html("Costs "+Beautify(getOJPCCost(ojpc_upgrades[tier-1]))+" glasses of OJ. Owned: "+ojpc_upgradeAmts[tier-1])
	}
})

/* Viewing Stats or returning to display */
$("#stats").click(function() {
	if ($("#stats").html() === "Stats") {
		$("#stats").html("Shelf")
		/* Draw the stats page */
		$("#omaker_shelf_purchases").addClass("hidden")
		$("#omaker_detail").addClass("hidden")
		$("#save_zone").addClass("hidden")
		$("#rebirth_zone").addClass("hidden")
		$("#stats_zone").removeClass("hidden")
		$("#shelf_container").height("425px")
	} else {
		$("#stats").html("Stats")
		/* Change back to shelf */
		$("#omaker_shelf_purchases").removeClass("hidden")
		$("#omaker_detail").removeClass("hidden")
		$("#stats_zone").addClass("hidden")
		$("#save_zone").addClass("hidden")
		$("#rebirth_zone").addClass("hidden")
		if ($("#omaker_detail").html() != "") {
			$("#shelf_container").height("325px")
		}
	}
	$("#save").html("Save")
})

/* Viewing Stats or returning to display */
$("#save").click(function() {
	if ($("#save").html() === "Save") {
		$("#omaker_shelf_purchases").addClass("hidden")
		$("#omaker_detail").addClass("hidden")
		$("#stats_zone").addClass("hidden")
		$("#rebirth_zone").addClass("hidden")
		$("#save_zone").removeClass("hidden")
		$("#shelf_container").height("425px")
		$("#save").html("Back")
	} else {
		if ($("#stats").html() === "Stats") {
			// go to shelf
			$("#omaker_shelf_purchases").removeClass("hidden")
			$("#omaker_detail").removeClass("hidden")
			$("#stats_zone").addClass("hidden")
			$("#save_zone").addClass("hidden")
			$("#rebirth_zone").addClass("hidden")
			if ($("#omaker_detail").html() != "") {
				$("#shelf_container").height("325px")
			}			
		} else {
			// go to stats
			$("#omaker_shelf_purchases").addClass("hidden")
			$("#omaker_detail").addClass("hidden")
			$("#save_zone").addClass("hidden")
			$("#rebirth_zone").addClass("hidden")
			$("#stats_zone").removeClass("hidden")
			$("#shelf_container").height("425px")
		}
		$("#save").html("Save")
	}
})

$("#rebirth").click(function() {
	$("#omaker_shelf_purchases").addClass("hidden")
	$("#omaker_detail").addClass("hidden")
	$("#save_zone").addClass("hidden")
	$("#stats_zone").addClass("hidden")	
	$("#shelf_container").height("425px")
	$("#save").html("Save")

	$("#rebirth_zone").removeClass("hidden")
})

function updateAffordable() {
	for (var i=0;i<allItems.length;i++) {
		$("#info_O_tier_"+(i+1)).html("Costs "+Beautify(getOMakerCost(i+1))+" glasses of OJ. Owned: "+orangeMakerAmts[i])
		if (oj < getOMakerCost(i+1)) {
			$("#purchase_O_tier_"+(i+1)).addClass("unaffordable")
		} else {
			$("#purchase_O_tier_"+(i+1)).removeClass("unaffordable")
		}
	}
	for (var i=0;i<ojpc_upgrades.length;i++) {
		if (oj < getOJPCCost(ojpc_upgrades[i])) {
			$("#purchase_OJ_"+(i+1)).addClass("unaffordable")
		} else {
			$("#purchase_OJ_"+(i+1)).removeClass("unaffordable")
		}
	}
}
/*

============================================================================
GAME LOOP
============================================================================

*/

$("#newsflash").html(loadingmessage)

var unfocused = false

var disp_o = o
var disp_ojcycle = ojcycle

window.addEventListener("focus", function(event) {
	$('#oj_cycle_bar').width(Math.round((1-ojcycle/ojcycletime)*maxcyclewidth).toString()+"%")
	$("#o_count").html(Math.floor(o))
	unfocused = false
})

window.addEventListener("blur", function(event) {
	unfocused = true
})

function disp() {
	if (disp_o < o) {
		disp_o += (ops+bonus_ops)/fps
	}
	if (o > 0) {
		if (disp_ojcycle >= ojcycle) {
			disp_ojcycle -= 1/fps
			$('#oj_cycle_bar').width(Math.round((1-disp_ojcycle/(ojcycletime+bonus_ojcycletime))*maxcyclewidth).toString()+"%")
		}
	}
	$("#o_count, #s_o").html(Beautify(disp_o))
}

function calculateJuiceSqueezed() {
		var cycletime = ojcycletime+bonus_ojcycletime
		// Counting for OJ production cycle
		if (ojcycle <= 0) {
			if (cycletime > 3) {
				ojcycle = cycletime
			} else {
				ojcycle = 3
				cycletime = 3
			}
			$('#oj_cycle_bar').css("width", "0%")
			disp_ojcycle = cycletime
			var dojpc = ojpc + bonus_ojpc
			if (o >= dojpc) {
				disp_o -= dojpc
				o -= dojpc
				oj += dojpc
				$("#oj_count, #s_oj").html(Beautify(oj))
				totaloj += dojpc
			} else if (o > 0 && disp_o < dojpc) {
				oj += o
				totaloj += o
				o = 0
				disp_o = 0
			} else {
				disp_o = 0
				o = 0
			}

			// Recalculate what's affordable
			updateAffordable()
			disp_o = o
		} else {
			if (cycletime < 3) {
				cycletime = 3
			}
			$('#oj_cycle_bar').width(Math.round((1-disp_ojcycle/(cycletime))*maxcyclewidth).toString()+"%")
		}
}

function logic() {
	// allows for passive bonuses, about once every 3 seconds
	if (msgcount%3 == 0) {
		getOBonus()
		getOJBonus()
	}

	// central game loop
	if (unfocused || (new Date().getTime() - time) > 1000) {
		time = new Date().getTime()

		bonusCleanup()
		// count oj cycle
		if (o >= 1) {
			ojcycle -= 1
		}
		calculateJuiceSqueezed()
		// Update oranges based on production
		o += ops+bonus_ops
		totalo += ops+bonus_ops

		// display orange amount (resizing based on length)
		var dispolength = Beautify(disp_o).toString().length
		if (dispolength > 13) {
			if (!$("#o_count").hasClass("small")) {
				$("#o_count").addClass("small")
			}
			if (dispolength > 23) {
				if (!$("#o_count").hasClass("shrink")) {
					$("#o_count").addClass("shrink")
				}				
			}
		} else {
			if ($("#o_count").hasClass("small")) {
				$("#o_count").removeClass("small")
			}			
			if ($("#o_count").hasClass("shrink")) {
				$("#o_count").removeClass("shrink")
			}
		}

		manageRebirth()

		if (msgcount-- <= 0) {
		 	// message if applicable
		 	var message
		 	for (var i = 0; i < o_messages.length; i++) {
		 		if (totalo >= o_messages[i].req) {
		 			message = o_messages[i].message
		 		}
		 	}
		 	showNews(message)
		}
		// automatic saving
		if ((lastsave+savetime*1000) < new Date().getTime()) {
			saveGame(true) // save quietly
			lastsave = new Date().getTime()
		}
		// Update page title
		document.title = Beautify(oj)+" Glasses of OJ"
		// Display new values on counters
		if (ops+bonus_ops < 1000) {
			$("#ops_count").html(Math.round((ops+bonus_ops) * 10) / 10)
		} else {
			$("#ops_count").html(Beautify(ops+bonus_ops))
		}
		$("#oj_count, #s_oj").html(Beautify(oj))

		// Update stat counter
		$("#s_totalo").html(Beautify(totalo))
		$("#s_totaloj").html(Beautify(totaloj))
		$("#s_ojclicks").html(Beautify(ojclicks))
		$("#s_oclicks").html(Beautify(oclicks))
		$("#s_ojcycle, #ojcycle_count").html(Beautify(ojcycletime+bonus_ojcycletime))
		$("#s_ojcycletime").html(Beautify(ojcycletime))
		$("#s_bonusojcycletime").html(Beautify(Math.abs(bonus_ojcycletime)))
		$("#s_ojpctotal, #ojpcc, #ojpc_count").html(Beautify(ojpc+bonus_ojpc))
		$("#s_ojpc").html(Beautify(ojpc))
		$("#s_bonusojpc").html(Beautify(bonus_ojpc))
		$("#s_ojpcbought").html(Beautify(owned_ojpc_upgrades))
		$("#s_clickreward").html(Beautify(clickreward + Math.round(ops*clickbonus))+" ("+Beautify(clickbonus*100)+"% OpS)")
		$("#s_opstotal").html(Math.round((ops+bonus_ops) * 10) / 10)
		$("#s_ops").html(Math.round(ops * 10) / 10)
		$("#s_bonusops").html(Math.round(bonus_ops * 10) / 10)
		$("#s_activeomakers").html(Beautify(activeomakers))
		$("#s_bonus").html(Beautify(bonuschance*100))
		$("#s_bonustime").html(Beautify(basebonustime))
		$("#s_fps").html(fps)
		$("#s_time").html(millisecondsToStr(new Date().getTime() - started))
		$("#game_saved").html(Math.floor((lastsave+savetime*1000 - new Date().getTime())/1000))
	}
}

function firstrunGame() {
	cleanAllItems()
	cleanOBonuses()
	cleanOJBonuses()
	cleanOJPCUpgrades()

	drawBackground()
	drawOShop()
	drawOJShop()
	setInterval(logic, 500)
	setInterval(disp, 1000/fps)
	loadOMessages()
	updateAffordable()
}

function tryLoadSave() {
	loadGame(getCookie("identifier"), true)
}

// save on exit
$(window).unload(function() {
	//saveGame(true)
})

firstrunGame()
tryLoadSave()